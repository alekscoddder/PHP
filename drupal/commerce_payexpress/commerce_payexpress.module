<?php
include_once dirname(__FILE__) . '/api/Connect2PayexpressPos.php';

/*
 * Implements hook_commerce_payment_method_info().
 * This hook will define the Payexpress payment method
 */
function commerce_payexpress_commerce_payment_method_info() {
    $payment_methods = array();
    $payment_methods['payexpress'] = array(
        'base' => 'commerce_payexpress',
        'title' => t('Payexpress'),
        'short_title' => t('Payexpress'),
        'display_title' => t('Pay via Payexpress'),
        'description' => t('Passerelle de paiement Payexpress'),
        'terminal' => FALSE,
        'offsite' => TRUE,
    );
    return $payment_methods;
}

/*
 * Implements hook_menu() 
 */
function commerce_payexpress_menu() {
    $items = array();
    $items['commerce_payexpress/callback/%'] = array(
        'page callback' => 'commerce_payexpress_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['commerce_payexpress/reject/%'] = array(
        'page callback' => 'commerce_payexpress_reject',
        'page arguments' => array(2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/*
* Configure page form.
* Defined default variable.
*/

function commerce_payexpress_settings_form($settings = NULL) {
    $form = array();
    $settings = (array) $settings + array(
        'webservice_url' => t('http://demo.payexpress.ma:1000/gateway/ws/reset'),
        'acquirer_public_output_key_1' => '',
        'acquirer_public_output_key_2' => '',
        'acquirer_public_input_key_1' => '',
        'acquirer_public_input_key_2' => '',
        'acquirer_id' => '',
        'pos_id' => '',
        'provider_code' => '',
        'pos_book_id' => ''
    );
    $form['webservice_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Server To Server Web Service URL'),
        '#description' => t('Payexpress gateway URL'),
        '#default_value' => $settings['webservice_url'],
    );
    $form['acquirer_public_output_key_1'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Output Key 1'),
        '#description' => t('Your Payexpress Public Output Key 1'),
        '#default_value' => $settings['acquirer_public_output_key_1'],
    );
    $form['acquirer_public_output_key_2'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Output Key 2'),
        '#description' => t('Your Payexpress Public Output Key 2'),
        '#default_value' => $settings['acquirer_public_output_key_2'],
    );
    $form['acquirer_public_input_key_1'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Input Key 1'),
        '#description' => t('Your Payexpress Public Input Key 1'),
        '#default_value' => $settings['acquirer_public_input_key_1'],
    );
    $form['acquirer_public_input_key_2'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Input Key 2'),
        '#description' => t('Your Payexpress Public Input Key 2'),
        '#default_value' => $settings['acquirer_public_input_key_2'],
    );
    $form['acquirer_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Acquirer ID / Marchand'),
        '#description' => t('Your Payexpress Acquirer ID / Marchand'),
        '#default_value' => $settings['acquirer_id'],
    );
    $form['pos_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Point Of Service ID / POS'),
        '#description' => t('Your Payexpress Point Of Service ID / POS'),
        '#default_value' => $settings['pos_id'],
    );
    $form['provider_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Provider ID'),
        '#description' => t('Your Payexpress Provider ID'),
        '#default_value' => $settings['provider_code'],
    );
    $form['pos_book_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Point de Vente'),
        '#description' => t('Your Payexpress Point de Vente'),
        '#default_value' => $settings['pos_book_id'],
    );
    return $form;
}

/**
 * Payment method callback: settings form.
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules.
 */
function commerce_payexpress_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form = array();
    $form['info'] = array(
        '#markup' => t('Payer en toute securite via Payexpress.'),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
    );
    return $form;
}

/**
 * Payment method callback: redirect form
 */
function commerce_payexpress_redirect_form($form, &$form_state, $order, $payment_method) {
	$isok = true;
    if (empty($payment_method['settings']['webservice_url'])) {$isok = false;}
    if (empty($payment_method['settings']['acquirer_public_output_key_1'])) {$isok = false;}
    if (empty($payment_method['settings']['acquirer_public_output_key_2'])) {$isok = false;}
    if (empty($payment_method['settings']['acquirer_public_input_key_1'])) {$isok = false;}
    if (empty($payment_method['settings']['acquirer_public_input_key_2'])) {$isok = false;}
    if (empty($payment_method['settings']['acquirer_id'])) {$isok = false;}
    if (empty($payment_method['settings']['pos_id'])) {$isok = false;}
    if (empty($payment_method['settings']['provider_code'])) {$isok = false;}
    if (empty($payment_method['settings']['pos_book_id'])) {$isok = false;}
    if (!$isok) {
        drupal_set_message(t('Payexpress gateway is not configured for use. Please verify your Payexpress gateway settings.'), 'error');
        return array();
    }
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $customer = $wrapper->commerce_customer_billing->commerce_customer_address->value();
    $account_settings = $payment_method['settings'];
	$c2p = new Connect2PayexpressPos($account_settings['webservice_url']);
	$c2p->setAcquirerId($account_settings['acquirer_id']);
	$c2p->setPosId($account_settings['pos_id']);
	$c2p->setProviderCode($account_settings['provider_code']);
	$c2p->setAcquirerPublicInputKey1($account_settings['acquirer_public_input_key_1']);
	$c2p->setAcquirerPublicInputKey2($account_settings['acquirer_public_input_key_2']);
	$sender_mac_index = strval(rand(1,2));
	$c2p->setSenderMacIndex($sender_mac_index);
	$pos_book_date = date('YmdHis\TO');
	$customer_id = strval(rand(5, 15));
	$customer_title = '0';
	$customer_id_type = '0';
	$customer_phone = '0600000000';
	$customer_country_code = 'MAR';
	$send_customer_mail = '1';
	$currency_code = '504';
	$transaction_amount = 500.00;
	$c2p->setPosBookId('Order #'.$order->order_id);
	$c2p->setPosBookDate($pos_book_date);
	$c2p->setTransactionAmount(commerce_currency_amount_to_decimal($order->commerce_order_total['und']['0']['amount'], $order->commerce_order_total['und']['0']['currency_code']));
	$c2p->setCurrencyCode(Connect2PayCurrencyHelper::getISO4217CurrencyCode($order->commerce_order_total['und']['0']['currency_code']));
	$c2p->setCustomerId($customer_id);
	$c2p->setCustomerTitle($customer_title);
	$c2p->setCustomerIdType($customer_id_type);
	$c2p->setCustomerName($customer['first_name'].' '.$customer['last_name']);
	$c2p->setCustomerCityId($customer['locality']);
	$c2p->setSendCustomerMail($send_customer_mail);
	$c2p->setCustomerEmail($order->mail);
	if (!$customer['data'] || isset($customer['data'])) {
		$data = unserialize($customer['data']);
		if (!$data['phone_number'] || isset($data['phone_number'])) {
			$c2p->setCustomerPhone($data['phone_number']);
		}
	}
	$c2p->setCustomerZipCode($customer['postal_code']);
	$c2p->setCustomerCountryCode(CountryIsoCode::getCountryByAlpha2($customer['country'])['alpha_3']);
	$c2p->setCustomerAddress($customer['thoroughfare']);
    $reject_url = url('commerce_payexpress/reject/' . $order->order_id, array('absolute' => TRUE));
    $callback_url = url('commerce_payexpress/callback/' . $order->order_id, array('absolute' => TRUE));
	$c2p->setUrl1('');
	$c2p->setUrl2('');
	$c2p->setUrl3('');
	$c2p->setUrl4($callback_url);
	$c2p->setUrl5($reject_url);
	$result = array();
	if($c2p->createReservation()) {
		$result = $c2p->getResult();
		if ($result['response_code'] == '0000') {
			$transaction_id = commerce_payexpress_get_payment_transaction($order->order_id);
			if ($transaction_id == false) {
				$transaction = commerce_payment_transaction_new('payexpress', $order->order_id);
			} else {
				$transaction = commerce_payment_transaction_load($transaction_id);
			}
			$transaction->instance_id = $payment_method['instance_id'];
			$transaction->remote_id = $result['token'];
			$transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
			$transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
			$transaction->remote_status = 'OK';
			$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
			$transaction->message = 'Pending';
			$transaction->payload = $result;
			commerce_payment_transaction_save($transaction);
			commerce_checkout_complete($order);
			drupal_goto(url($result['url1'], array('absolute' => TRUE)));
			exit;
		} else {
			drupal_set_message($c2p->getErrorMessage(), 'error');
			return array();
		}
	}else{
		drupal_set_message($c2p->getErrorMessage(), 'error');
	}
}

/*
 * Payment method hook_menu callback: submint paiement
 */
function commerce_payexpress_callback($order_id) {
	$order = commerce_order_load($order_id);
	commerce_order_status_update($order, 'processing');
    $transaction_id = commerce_payexpress_get_payment_transaction($order->order_id);
    if ($transaction_id != false) {
        $transaction = commerce_payment_transaction_load($transaction_id);
		$transaction->message = 'Completed';
		$tpayload = $transaction->payload;
		commerce_payment_transaction_save($transaction);
    }
	if ($order) {$payment_method = commerce_payment_method_instance_load($order->data['payment_method']);}
	if (!$payment_method || $payment_method['method_id'] != 'payexpress') {return FALSE;}
    $account_settings = $payment_method['settings'];
	$c2p = new Connect2PayexpressPos($account_settings['webservice_url']);
	$c2p->setAcquirerId($account_settings['acquirer_id']);
	$c2p->setPosId($account_settings['pos_id']);
	$c2p->setProviderCode($account_settings['provider_code']);
	$c2p->setSenderMacIndex($tpayload['sender_mac_index']);
	$c2p->setAcquirerPublicInputKey1($account_settings['acquirer_public_input_key_1']);
	$c2p->setAcquirerPublicInputKey2($account_settings['acquirer_public_input_key_2']);
	$c2p->setAcquirerPublicOutputKey1($account_settings['acquirer_public_output_key_1']);
	$c2p->setAcquirerPublicOutputKey2($account_settings['acquirer_public_output_key_2']);
	$data = $_POST;
	if($c2p->callbackPayment($data))
	{
		$request_data = $c2p->getCallbackRequestData();
		$c2p->setResponseCode('0000');
	}else{
		$error_message = $c2p->getErrorMessage();
		$c2p->setResponseCode('0000');
	}
	$response = $c2p->returnPaymentResponse($data);
	echo json_encode($response) ;	
	exit;
	
}

/*
 * Payment method hook_menu callback: cancel paiement
 */
function commerce_payexpress_reject($order_id) {
	$order = commerce_order_load($order_id);
	commerce_order_status_update($order, 'canceled');
    $transaction_id = commerce_payexpress_get_payment_transaction($order->order_id);
    if ($transaction_id != false) {
        $transaction = commerce_payment_transaction_load($transaction_id);
		$transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
		$transaction->message = 'Failure';
		$tpayload = $transaction->payload;
		commerce_payment_transaction_save($transaction);
    }
	if ($order) {$payment_method = commerce_payment_method_instance_load($order->data['payment_method']);}
	if (!$payment_method || $payment_method['method_id'] != 'payexpress') {return FALSE;}
    $account_settings = $payment_method['settings'];
	$c2p = new Connect2PayexpressPos($account_settings['webservice_url']);
	$c2p->setAcquirerId($account_settings['acquirer_id']);
	$c2p->setPosId($account_settings['pos_id']);
	$c2p->setProviderCode($account_settings['provider_code']);
	$c2p->setSenderMacIndex($tpayload['sender_mac_index']);
	$c2p->setAcquirerPublicInputKey1($account_settings['acquirer_public_input_key_1']);
	$c2p->setAcquirerPublicInputKey2($account_settings['acquirer_public_input_key_2']);
	$c2p->setAcquirerPublicOutputKey1($account_settings['acquirer_public_output_key_1']);
	$c2p->setAcquirerPublicOutputKey2($account_settings['acquirer_public_output_key_2']);
	$data = $_POST;
	if($c2p->callbackReversal($data))
	{
		$request_data = $c2p->getCallbackRequestData();
		$c2p->setResponseCode('0000');
	}else{
		$error_message = $c2p->getErrorMessage();
		$c2p->setResponseCode('0117');
	}
	$response = $c2p->returnReversalResponse($data);
	echo json_encode($response) ;
	exit;
}

/*
 * Function for found transaction id.
 */
function commerce_payexpress_get_payment_transaction($order_id) {
    $query = new EntityFieldQuery;
    $result = $query
            ->entityCondition('entity_type', 'commerce_payment_transaction')
            ->propertyCondition('payment_method', 'payexpress')
            ->propertyCondition('order_id', $order_id)
            ->execute();
    if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
        $transaction = array_pop($result['commerce_payment_transaction']);
        return $transaction->transaction_id;
    }
    return FALSE;
}
